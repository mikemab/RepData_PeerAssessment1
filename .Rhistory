split(activityData, date)
activityData <- read.csv("activity.csv", header = TRUE, na = "NA", stringsAsFactors = TRUE)
split(activityData, date)
split(activityData, activityData$date)
melt(activityData)
library(reshape2)
melt(activityData)
dfstepbyday <- merge(unique(activityData$date), stepsbyday)
stepsbyday <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepsbyday, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days")
mean(stepsbyday, na.rm = TRUE)
median(stepsbyday, na.rm = TRUE)
dfstepbyday <- merge(unique(activityData$date), stepsbyday)
dfstepbyday
stepsbyday
dfstepbyday <- cbind(unique(activityData$date), stepsbyday)
dfstepbyday
hist(stepsbyday, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
mean(stepsbyday, na.rm = TRUE)
median(stepsbyday, na.rm = TRUE)
dfstepbyday
meanStepsbyInterval <- tapply(activityData$steps, activityData$interval, mean, na.rm=TRUE)
plot(unique(activityData$interval), meanStepsbyInterval, type="l", col="blue")
plot(unique(activityData$interval), meanStepsbyInterval, type="l", col="blue", main="Average number of steps by Interval", xlab="Interval",ylab = "Average number of steps")
dfInterval <- cbind(unique(activityData$interval, meanStepsbyInterval))
dfInterval
length(unique(activityData$interval))
length(meanStepsbyInterval)
dfInterval <- cbind(unique(activityData$interval), meanStepsbyInterval)
dfInterval
dfInterval[which.max(dfInterval$meanStepsbyInterval)]
dfInterval[which.max(dfInterval)]
dfInterval[which.max(dfInterval[,2])]
dfInterval[which.max(dfInterval[meanStepsbyInterval])]
dfInterval <- as.data.fram(dfInterval)
dfInterval <- as.data.frame(dfInterval)
head(dfInterval)
names(dfInterval) <- c("interval","meanSteps")
head(dfInterval)
dfInterval[which.max(dfInterval$meanSteps)]
dfInterval <- cbind(unique(activityData$interval), meanStepsbyInterval)
dfInterval <- as.data.frame(dfInterval)
names(dfInterval) <- c("interval","meanSteps")
dfInterval[which.max(dfInterval$meanSteps)]
dfInterval[which.max(dfInterval[,2])]
head(dfInterval)
names(dfInterval) <- c("interval","meanSteps")
head(dfInterval)
dfInterval[which.max(dfInterval$meanSteps)]
dfInterval[which.max(dfInterval$meanSteps)]$interval
dfInterval$interval[which.max(dfInterval$meanSteps)]
c(dfInterval$interval[which.max(dfInterval$meanSteps)],dfInterval$meanSteps[which.max(dfInterval$meanSteps)])
maxdfInterval <- as.data.frame(c(dfInterval$interval[which.max(dfInterval$meanSteps)],dfInterval$meanSteps[which.max(dfInterval$meanSteps)]))
maxdfInterval <- as.data.frame(c(dfInterval$interval[which.max(dfInterval$meanSteps)],dfInterval$meanSteps[which.max(dfInterval$meanSteps)]))
names(maxdfInterval) <- c("Interval #", "Mean Steps")
maxdfInterval
maxdfInterval <- (c(dfInterval$interval[which.max(dfInterval$meanSteps)],dfInterval$meanSteps[which.max(dfInterval$meanSteps)]))
names(maxdfInterval) <- c("Interval #", "Mean Steps")
maxdfInterval
maxdfInterval <- (c(dfInterval$interval[which.max(dfInterval$meanSteps)],dfInterval$meanSteps[which.max(dfInterval$meanSteps)]))
names(maxdfInterval) <- c("Interval#", "MeanSteps")
maxdfInterval
maxdfInterval$interval#
maxdfInterval[1]
sum(!complete.case(activityData))
sum(!complete.cases(activityData))
head(dfInterval)
medianStepsbyInterval <- tapply(activityData$steps, activityData$interval, median, na.rm=TRUE)
medianStepsbyInterval <- tapply(activityData$steps, activityData$interval, median, na.rm=TRUE)
dfInterval_median <- cbind(unique(activityData$interval), medianStepsbyInterval)
dfInterval_median <- as.data.frame(dfInterval_median)
head(dfInterval_median)
match(activityData$interval, dfInterval_median$medianStepsbyInterval)
match(activityData$interval, dfInterval_median$V1)
dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)]
act_impute <- transfrom(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)]), no = activityData$steps)
act_impute <- transform(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)]), no = activityData$steps)
act_impute <- transform(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)], no = activityData$steps)
head(meanStepsbyInterval)
meanStepsbyInterval[which.max(meanStepsbyInterval)]
library(dplyr)
class(activityData$interval)
class("asdas")
by_interval <- activityData %>% group_by(interval)
by_interval_mean <- by_interval %>% summarize(steps = mean(steps, na.rm=TRUE))
by_interval_max <- by_interval %>% summarize(steps = max(steps, na.rm=TRUE))
by_interval_median <- by_interval %>% summarize(steps = median(steps, na.rm=TRUE))
by_interval_mean[which.max(by_interval_mean$steps),]
plot(unique(activityData$interval), by_interval_mean$steps, type="l")
numIncomplete <- sum(is.na(activityData))
imputeDate <- transform(activityData, steps = )
"Strategy: Replace all NA of a specfied interval with the median of that interval"
head(by_interval_median)
head(by_interval_mean)
tail(by_interval_median)
#Going to use a For loop to replace specfice NA's with the median
ad_replace <- activityData
i <- 1
for (i in length(ad_replace$steps)){
if (is.na(ad_replace$steps[i])){
ad_replace$steps[i] = by_interval_median$steps[i-1 %% 288]
print(ad_replace$steps[i])
}
}
head(ad_replace)
2 %% 288
288 %% 288
(17568-1) %% 288
length(by_interval_median$steps)
length(ad_replace$steps)
act_impute <- transform(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)], no = activityData$steps)
act_impute <- transform(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)], no = activityData$steps))
act_impute <- transform(activityData, activityData$steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)], no = activityData$steps))
act_impute <- transform(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)], no = activityData$steps))
head(act_impute)
View(act_impute)
tail(act_impute)
summary(act_impute)
stepsbyday_impute <- tapply(act_impute$steps, act_impute$date, sum, na.rm=TRUE)
hist(stepsbyday_impute, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
hist(stepsbyday, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
medianStepsbyInterval <- tapply(activityData$steps, activityData$interval, mean, na.rm=TRUE)
dfInterval_median <- cbind(unique(activityData$interval), medianStepsbyInterval)
dfInterval_median <- as.data.frame(dfInterval_median)
head(dfInterval_median)
dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)]
act_impute <- transform(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)], no = activityData$steps))
stepsbyday_impute <- tapply(act_impute$steps, act_impute$date, sum, na.rm=TRUE)
hist(stepsbyday_impute, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
medianStepsbyInterval <- tapply(activityData$steps, activityData$interval, median, na.rm=TRUE)
dfInterval_median <- cbind(unique(activityData$interval), medianStepsbyInterval)
dfInterval_median <- as.data.frame(dfInterval_median)
head(dfInterval_median)
dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)]
act_impute <- transform(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)], no = activityData$steps))
stepsbyday_impute <- tapply(act_impute$steps, act_impute$date, sum, na.rm=TRUE)
hist(stepsbyday_impute, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
mean(stepsbyday_impute)
median(stepsbyday_impute)
summary(act_impute)
summary(stepsbyday_impute)
activityData$date <- as.POSIXct(activityData$data, "%Y-%m-%d")
activityData$date <- as.POSIXct(activityData$data, "%Y-%m-%d")
activityData$date <- as.POSIXct(activityData$date, "%Y-%m-%d")
warnings()
unique(activityData$date)
stepsbyday <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepsbyday, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
mean(stepsbyday, na.rm = TRUE)
median(stepsbyday, na.rm = TRUE)
dfstepbyday <- cbind(unique(activityData$date), stepsbyday)
dfstepbyday
names(dfstepbyday) <- c("v1","stepsbyday")
dfstepbyday
dfstepbyday <- cbind(unique(activityData$date), stepsbyday)
dfstepbyday
dfstepbyday[,1]
meanStepsbyInterval <- tapply(activityData$steps, activityData$interval, mean, na.rm=TRUE)
plot(unique(activityData$interval), meanStepsbyInterval, type="l", col="blue", main="Average number of steps by Interval", xlab="Interval",ylab = "Average number of steps")
dfInterval <- cbind(unique(activityData$interval), meanStepsbyInterval)
dfInterval <- as.data.frame(dfInterval)
head(dfInterval)
names(dfInterval) <- c("interval","meanSteps")
maxdfInterval <- (c(dfInterval$interval[which.max(dfInterval$meanSteps)],dfInterval$meanSteps[which.max(dfInterval$meanSteps)]))
names(maxdfInterval) <- c("Interval#", "MeanSteps")
maxdfInterval[1]
maxdfInterval
sum(!complete.cases(activityData))
medianStepsbyInterval <- tapply(activityData$steps, activityData$interval, median, na.rm=TRUE)
dfInterval_median <- cbind(unique(activityData$interval), medianStepsbyInterval)
dfInterval_median <- as.data.frame(dfInterval_median)
head(dfInterval_median)
dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)]
act_impute <- transform(activityData, steps = ifelse(is.na(activityData$steps), yes = dfInterval_median$medianStepsbyInterval[match(activityData$interval, dfInterval_median$V1)], no = activityData$steps))
stepsbyday_impute <- tapply(act_impute$steps, act_impute$date, sum, na.rm=TRUE)
hist(stepsbyday_impute, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
hist(stepsbyday_impute, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500), col="blue")
mean(stepsbyday_impute)
median(stepsbyday_impute)
weekdays(activityData$date)
activityData <- read.csv("activity.csv", header = TRUE, na = "NA", stringsAsFactors = TRUE)
View(activityData)
activityData$date
activityData <- read.csv("activity.csv", header = TRUE, na = "NA", stringsAsFactors = TRUE)
activityData$date <- as.POSIXct(activityData$date, "%YYYY-%MM-%DD")
unique(activityData$date)
stepsbyday <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepsbyday, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
activityData$date <- as.POSIXct(activityData$date, "%YYYY-%MM-%DD",tz ="GMT")
unique(activityData$date)
stepsbyday <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
hist(stepsbyday, main="Histogram of total number of steps taken each day", xlab = "Step Count", ylab = "# of days", breaks = seq(0,25000, by = 2500))
unique(activityData$date)
weekdays(activityData$date)
?sapply
activityData$dayType <- sapply(activityData$date, function(x){
if (weekdays(x) = "Saturday" | weekdays(x) = "Sunday") {
y = "Weekend" else {
y = "Weekday"
}
}
})
activityData$dayType <- sapply(activityData$date, function(x){
if (weekdays(x) = "Saturday" | weekdays(x) = "Sunday") {
y = "Weekend" } else {
y = "Weekday"
}
})
weekendIndicator <- function(x){
if (weekdays(x) = "Saturday" | weekdays(x) = "Sunday") {
y = "Weekend" }
else {
y = "Weekday"
}
}
weekendIndicator <- function(x){
if (weekdays(x) = "Saturday" | weekdays(x) = "Sunday") {
y = "Weekend" }
else {
y = "Weekday"
}
y
}
weekendIndicator <- function(x){
if (weekdays(x) == "Saturday" | weekdays(x) == "Sunday") {
y = "Weekend" }
else {
y = "Weekday"
}
y
}
weekendIndicator("Saturday")
weekendIndicator(2017-06-18)
weekendIndicator("2017-06-18")
activityData$dayType <- sapply(activityData$date, weekendIndicator)
activityData$dayType <- sapply(activityData$date, weekendIndicator)
warnings()
head(activityData$dayType)
activityData$dayType[1:20]
aggregate(activityData, date~steps)
aggregate(activityData, date~steps, sum)
aggregate(steps~date, activityData, sum)
aggregate(steps~date~dateType, activityData, sum)
activityData$dayType <- sapply(activityData$date, weekendIndicator)
aggregate(steps~date~dayType, activityData, sum)
aggregate(steps~dayType, activityData, sum)
library(ggplot2)
meanStepsbyIntervaltest <- tapply(activityData$steps, list(activityData$interval, activityData$dayType, mean, na.rm=TRUE)
library(ggplot2)
meanStepsbyIntervaltest <- tapply(activityData$steps, list(activityData$interval, activityData$dayType, mean, na.rm=TRUE)
library(ggplot2)
meanStepsbyIntervaltest <- tapply(activityData$steps, list(activityData$interval, activityData$dayType), mean, na.rm=TRUE)
meanStepsbyIntervaltest
meanStepsbyIntervalday <- tapply(activityData$steps, list(activityData$interval, activityData$dayType), mean, na.rm=TRUE)
plot <- ggplot(meanStepsbyIntervalday, aes(x = interval, y = steps, color = dayType)) + geom_line
plot <- ggplot(meanStepsbyIntervalday, aes(interval)) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue"))
meanStepsbyIntervalday = as.data.frame(meanStepsbyIntervalday)
plot <- ggplot(meanStepsbyIntervalday, aes(interval)) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue"))
print(plot)
plot <- ggplot(meanStepsbyIntervalday) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue"))
print(plot)
meanStepsbyIntervalday = as.data.frame(cbind(meanStepsbyIntervalday, unique(activityData$interval))
plot <- ggplot(meanStepsbyIntervalday) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue"))
print(plot)
meanStepsbyIntervaltest
library(ggplot2)
meanStepsbyIntervalday = as.data.frame(cbind(meanStepsbyIntervalday, unique(activityData$interval))
plot <- ggplot(meanStepsbyIntervalday) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue"))
print(plot)
meanStepsbyIntervaltest
library(ggplot2)
meanStepsbyIntervalday = as.data.frame(cbind(meanStepsbyIntervalday, unique(activityData$interval))
meanStepsbyIntervalday = as.data.frame(cbind(meanStepsbyIntervalday, unique(activityData$interval)))
meanStepsbyIntervalday <- tapply(activityData$steps, list(activityData$interval, activityData$dayType), mean, na.rm=TRUE)
meanStepsbyIntervalday = as.data.frame(cbind(meanStepsbyIntervalday, unique(activityData$interval)))
head(meanStepsbyIntervalday)
plot <- ggplot(meanStepsbyIntervalday, aes(V3)) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue"))
print(plot)
plot <- ggplot(meanStepsbyIntervalday, aes(V3)) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue")) + facet_wrap(Weekend + Weekend, ncol=1, nrow = 2)
d <- melt(meanStepsbyIntervalday, id = c("Weekday","Weekend"))
head(d)
d <- melt(activityData, id = interval)
d <- melt(activityData, id = interval)
d <- melt(activityData, id = activityData$interval)
View(activityData)
d <- melt(activityData, id = 1:2, measure.vars = activityData$dayType)
head(d)
plot <- ggplot(d, aes(V3)) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue")) + facet_wrap(WdayType, ncol=1, nrow = 2)
plot <- ggplot(d, aes(V3)) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue")) + facet_wrap(dayType, ncol=1, nrow = 2)
head(meanStepsbyIntervalday)
d <- melt(activityData, measure.vars = activityData$dayType)
plot <- ggplot(d, aes(V3)) + geom_line(aes(y = Weekday, colour = "red")) + geom_line(aes(y = Weekend, color = "blue")) + facet_wrap(dayType, ncol=1, nrow = 2)
d <- melt(activityData, measure.vars = 1:2)
head(d)
head(meanStepsbyIntervalday)
meanStepsbyIntervalday <- tapply(list(activityData$steps, activityData$dayType), list(activityData$interval, activityData$dayType), mean, na.rm=TRUE)
meanStepsbyIntervalday <- tapply(activityData$steps, list(activityData$interval, activityData$dayType), mean, na.rm=TRUE)
meanStepsbyIntervalday = as.data.frame(cbind(meanStepsbyIntervalday, unique(activityData$interval)))
head(meanStepsbyIntervalday)
aggregate(steps~date+dayType, activityData, mean)
aggregate(steps~interval+dayType, activityData, mean)
head(meanstepsbyintervaldaytype)
head(meanstepsbyintervaldaytype)
meanstepsbyintervaldaytype <- aggregate(steps~interval+dayType, activityData, mean)
head(meanstepsbyintervaldaytype)
plot <- ggplot(meanstepsbyintervaldaytype, aes(x = interval, y = steps, color = dayType)) + geom_line() + facet_wrap(~dayType, ncol=1, nrow = 2)
print(plot)
plot <- ggplot(meanstepsbyintervaldaytype, aes(x = interval, y = steps, color = dayType)) + geom_line() + facet_wrap(~dayType, ncol=1, nrow = 2) + labs(title = "Average Daily Steps by Weekend/Weekday", x = "Interval (5 minuted each)", y = "Step count in interval")
print(plot)
plot <- ggplot(meanstepsbyintervaldaytype, aes(x = interval, y = steps, color = dayType)) + geom_line() + facet_wrap(~dayType, ncol=1, nrow = 2) + labs(title = "Average Daily Steps by Weekend/Weekday", x = "Interval (5 minutes each)", y = "Step count in interval")
print(plot)
summary(activityData)
activityData <- read.csv("activity.csv", header = TRUE, na = "NA", stringsAsFactors = TRUE)
activityData$date <- as.POSIXct(activityData$date, "%YYYY-%MM-%DD",tz ="GMT")
summary(activityData)
activityData$date <- as.Date(activityData$date)
summary(activityData)
temp = "activity.zip"
GET("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp)
unzip(temp)
library(httr)
temp = "activity.zip"
GET("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", temp)
unzip(temp)
temp = "activity.zip"
GET("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", write_disk(temp, overwrite=FALSE))
unzip(temp)
if(!file.exists("activity.zip")){
temp = "activity.zip"
GET("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", write_disk(temp, overwrite=FALSE)) } else if (!file.exists("activity.csv")){
unzip("activity.zip")
}
}
if(!file.exists("activity.zip")){
temp = "activity.zip"
GET("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", write_disk(temp, overwrite=FALSE)) } else if (!file.exists("activity.csv")){
unzip("activity.zip")
}
